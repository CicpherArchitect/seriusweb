import React, { useState } from 'react';
import { FileSearch, Shield, AlertTriangle, CheckCircle, Upload, RefreshCw } from 'lucide-react';

interface MalwareAnalysis {
  type: string;
  family?: string;
  behavior: {
    fileSystem: string[];
    network: string[];
    registry: string[];
  };
  indicators: {
    hash: string;
    c2Servers: string[];
    signatures: string[];
  };
  risk: {
    score: number;
    level: 'low' | 'medium' | 'high' | 'critical';
    impact: string[];
  };
  mitigation: string[];
}

const MalwareAnalyzer: React.FC = () => {
  const [analyzing, setAnalyzing] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [analysis, setAnalysis] = useState<MalwareAnalysis | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files?.length) {
      setSelectedFile(files[0]);
      setAnalysis(null);
      setError(null);
    }
  };

  const analyzeMalware = async () => {
    if (!selectedFile) return;

    setAnalyzing(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('file', selectedFile);

      const response = await fetch('/.netlify/functions/malwareAnalysis', {
        method: 'POST',
        body: formData
      });

      const data = await response.json();
      setAnalysis(data);
    } catch (err) {
      setError('Failed to analyze malware');
      console.error('Analysis error:', err);
    } finally {
      setAnalyzing(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <FileSearch className="w-8 h-8 text-indigo-600 mr-3" />
          <h2 className="text-2xl font-bold">Malware Analysis</h2>
        </div>
      </div>

      <div className="space-y-6">
        {/* File Upload */}
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6">
          <div className="text-center">
            <Upload className="mx-auto h-12 w-12 text-gray-400" />
            <div className="mt-4">
              <label
                htmlFor="file-upload"
                className="cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500"
              >
                <span>Upload malware sample</span>
                <input
                  id="file-upload"
                  name="file-upload"
                  type="file"
                  className="sr-only"
                  onChange={handleFileSelect}
                />
              </label>
            </div>
            {selectedFile && (
              <p className="mt-2 text-sm text-gray-500">
                Selected: {selectedFile.name}
              </p>
            )}
          </div>
        </div>

        {/* Analyze Button */}
        <div className="flex justify-center">
          <button
            onClick={analyzeMalware}
            disabled={!selectedFile || analyzing}
            className={`btn-primary flex items-center ${
              !selectedFile || analyzing ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            {analyzing ? (
              <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
            ) : (
              <Shield className="w-5 h-5 mr-2" />
            )}
            {analyzing ? 'Analyzing...' : 'Analyze Sample'}
          </button>
        </div>

        {/* Error Message */}
        {error && (
          <div className="p-4 bg-red-50 text-red-700 rounded-md flex items-center">
            <AlertTriangle className="w-5 h-5 mr-2" />
            {error}
          </div>
        )}

        {/* Analysis Results */}
        {analysis && (
          <div className="space-y-6">
            {/* Overview */}
            <div className="border rounded-lg p-4">
              <h3 className="font-medium mb-4">Analysis Overview</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-500">Type</p>
                  <p className="font-medium">{analysis.type}</p>
                </div>
                {analysis.family && (
                  <div>
                    <p className="text-sm text-gray-500">Family</p>
                    <p className="font-medium">{analysis.family}</p>
                  </div>
                )}
                <div>
                  <p className="text-sm text-gray-500">Risk Score</p>
                  <p className="font-medium">{(analysis.risk.score * 100).toFixed(1)}%</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Risk Level</p>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    analysis.risk.level === 'critical' ? 'bg-red-100 text-red-800' :
                    analysis.risk.level === 'high' ? 'bg-orange-100 text-orange-800' :
                    analysis.risk.level === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {analysis.risk.level}
                  </span>
                </div>
              </div>
            </div>

            {/* Behavior Analysis */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-3">File System Activity</h4>
                <ul className="space-y-2">
                  {analysis.behavior.fileSystem.map((activity, index) => (
                    <li key={index} className="text-sm text-gray-600">• {activity}</li>
                  ))}
                </ul>
              </div>
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-3">Network Activity</h4>
                <ul className="space-y-2">
                  {analysis.behavior.network.map((activity, index) => (
                    <li key={index} className="text-sm text-gray-600">• {activity}</li>
                  ))}
                </ul>
              </div>
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-3">Registry Changes</h4>
                <ul className="space-y-2">
                  {analysis.behavior.registry.map((activity, index) => (
                    <li key={index} className="text-sm text-gray-600">• {activity}</li>
                  ))}
                </ul>
              </div>
            </div>

            {/* Indicators */}
            <div className="border rounded-lg p-4">
              <h3 className="font-medium mb-4">Indicators of Compromise</h3>
              <div className="space-y-4">
                <div>
                  <p className="text-sm font-medium text-gray-500">File Hash</p>
                  <p className="text-sm font-mono">{analysis.indicators.hash}</p>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-500">C2 Servers</p>
                  <ul className="mt-1 space-y-1">
                    {analysis.indicators.c2Servers.map((server, index) => (
                      <li key={index} className="text-sm font-mono">{server}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-500">Signatures</p>
                  <ul className="mt-1 space-y-1">
                    {analysis.indicators.signatures.map((signature, index) => (
                      <li key={index} className="text-sm">• {signature}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>

            {/* Mitigation Steps */}
            <div className="border rounded-lg p-4">
              <h3 className="font-medium mb-4">Recommended Mitigation</h3>
              <ul className="space-y-2">
                {analysis.mitigation.map((step, index) => (
                  <li key={index} className="flex items-start">
                    <Shield className="w-5 h-5 text-indigo-500 mr-2 mt-0.5" />
                    <span className="text-gray-700">{step}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MalwareAnalyzer;